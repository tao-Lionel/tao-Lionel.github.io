import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.4313453f.js";const u=JSON.parse('{"title":"第十一章 期约与异步函数","description":"","frontmatter":{"title":"第十一章 期约与异步函数","date":"2022-10-06T16:53:13.000Z","permalink":"/pages/a66a05/","categories":["前端","学习笔记","Js高级程序设计笔记"],"tags":[null],"author":{"name":"Lionel tao","link":"https://github.com/tao-Lionel"}},"headers":[],"relativePath":"note/01.js高级程序设计笔记/11.第十一章 期约与异步函数.md","filePath":"note/01.js高级程序设计笔记/11.第十一章 期约与异步函数.md","lastUpdated":1688706935000}'),o={name:"note/01.js高级程序设计笔记/11.第十一章 期约与异步函数.md"},p=l(`<h2 id="_11-1-异步编程" tabindex="-1">11.1 异步编程 <a class="header-anchor" href="#_11-1-异步编程" aria-label="Permalink to &quot;11.1 异步编程&quot;">​</a></h2><h3 id="_11-1-1-同步与异步" tabindex="-1">11.1.1 同步与异步 <a class="header-anchor" href="#_11-1-1-同步与异步" aria-label="Permalink to &quot;11.1.1 同步与异步&quot;">​</a></h3><p>同步行为对应内存中顺序执行的处理器指令</p><h3 id="_11-1-2-以往的异步编程模式" tabindex="-1">11.1.2 以往的异步编程模式 <a class="header-anchor" href="#_11-1-2-以往的异步编程模式" aria-label="Permalink to &quot;11.1.2 以往的异步编程模式&quot;">​</a></h3><h4 id="_1-异步返回值" tabindex="-1">1. 异步返回值 <a class="header-anchor" href="#_1-异步返回值" aria-label="Permalink to &quot;1. 异步返回值&quot;">​</a></h4><p>给异步操作提供一个回调</p><h4 id="_2-失败处理" tabindex="-1">2. 失败处理 <a class="header-anchor" href="#_2-失败处理" aria-label="Permalink to &quot;2. 失败处理&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">double</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">success</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">failure</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(()</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">!==</span><span style="color:#9ECBFF;">&#39; number&#39;</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;xxxxxx&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">success</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> value)</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(e){</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">failure</span><span style="color:#E1E4E8;">(e)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">successCallback</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`success:\${</span><span style="color:#E1E4E8;">x</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">failureCallback</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`failure:\${</span><span style="color:#E1E4E8;">e</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">double</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,successCallback,failureCallback) </span><span style="color:#6A737D;">// success 6</span></span>
<span class="line"><span style="color:#B392F0;">double</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">,successCallback,failureCallback) </span><span style="color:#6A737D;">// failure xxxxxx</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">double</span><span style="color:#24292E;">(</span><span style="color:#E36209;">value</span><span style="color:#24292E;">,</span><span style="color:#E36209;">success</span><span style="color:#24292E;">, </span><span style="color:#E36209;">failure</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(()</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">!==</span><span style="color:#032F62;">&#39; number&#39;</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;xxxxxx&#39;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">success</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> value)</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(e){</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">failure</span><span style="color:#24292E;">(e)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  },</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">successCallback</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">x</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`success:\${</span><span style="color:#24292E;">x</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">failureCallback</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">e</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`failure:\${</span><span style="color:#24292E;">e</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">double</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,successCallback,failureCallback) </span><span style="color:#6A737D;">// success 6</span></span>
<span class="line"><span style="color:#6F42C1;">double</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;b&#39;</span><span style="color:#24292E;">,successCallback,failureCallback) </span><span style="color:#6A737D;">// failure xxxxxx</span></span></code></pre></div><h4 id="_3-嵌套异步回调" tabindex="-1">3. 嵌套异步回调 <a class="header-anchor" href="#_3-嵌套异步回调" aria-label="Permalink to &quot;3. 嵌套异步回调&quot;">​</a></h4><h2 id="_11-2-期约" tabindex="-1">11.2 期约 <a class="header-anchor" href="#_11-2-期约" aria-label="Permalink to &quot;11.2 期约&quot;">​</a></h2><h3 id="_11-2-1-promises-a-规范" tabindex="-1">11.2.1 Promises A+规范 <a class="header-anchor" href="#_11-2-1-promises-a-规范" aria-label="Permalink to &quot;11.2.1 Promises A+规范&quot;">​</a></h3><h3 id="_11-2-2-期约基础" tabindex="-1">11.2.2 期约基础 <a class="header-anchor" href="#_11-2-2-期约基础" aria-label="Permalink to &quot;11.2.2 期约基础&quot;">​</a></h3><h4 id="_1-期约状态机" tabindex="-1">1. 期约状态机 <a class="header-anchor" href="#_1-期约状态机" aria-label="Permalink to &quot;1. 期约状态机&quot;">​</a></h4><p>三种状态：待定（pending）、兑现（fulfilled）、拒绝（rejected）</p><h4 id="_3-通过执行函数控制期约状态" tabindex="-1">3.通过执行函数控制期约状态 <a class="header-anchor" href="#_3-通过执行函数控制期约状态" aria-label="Permalink to &quot;3.通过执行函数控制期约状态&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 调用resolve()会把状态切为兑现，调用reject()会把状态切为拒绝</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> p1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">resolve</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">reject</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">())</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 调用resolve()会把状态切为兑现，调用reject()会把状态切为拒绝</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> p1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">((</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">,</span><span style="color:#E36209;">reject</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">())</span></span></code></pre></div><h4 id="_4-promise-resolve" tabindex="-1">4. Promise.resolve() <a class="header-anchor" href="#_4-promise-resolve" aria-label="Permalink to &quot;4. Promise.resolve()&quot;">​</a></h4><p>期约并非一开始就必须处于待定状态，通过调用<code>Promise,resolve()</code>静态方法，可以实例化一个解决的期约。</p><h4 id="_5-promise-reject" tabindex="-1">5. Promise.reject() <a class="header-anchor" href="#_5-promise-reject" aria-label="Permalink to &quot;5. Promise.reject()&quot;">​</a></h4><p><code>Promise.reject()</code>会实例化一个拒绝的期约并抛出一个异步错误</p><h4 id="_6-同步-异步执行的二元性" tabindex="-1">6.同步/异步执行的二元性 <a class="header-anchor" href="#_6-同步-异步执行的二元性" aria-label="Permalink to &quot;6.同步/异步执行的二元性&quot;">​</a></h4><p>两种模式下抛出错误的情形</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(e) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(e) </span><span style="color:#6A737D;">// Error: foo</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">reject</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;bar&#39;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(e){</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(e)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// Uncaught (in promise) Error:bar</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(e) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(e) </span><span style="color:#6A737D;">// Error: foo</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">reject</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;bar&#39;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(e){</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(e)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// Uncaught (in promise) Error:bar</span></span></code></pre></div><h3 id="_11-2-3-期约的实例方法" tabindex="-1">11.2.3 期约的实例方法 <a class="header-anchor" href="#_11-2-3-期约的实例方法" aria-label="Permalink to &quot;11.2.3 期约的实例方法&quot;">​</a></h3><h4 id="_1-实现thenable接口" tabindex="-1">1. 实现Thenable接口 <a class="header-anchor" href="#_1-实现thenable接口" aria-label="Permalink to &quot;1. 实现Thenable接口&quot;">​</a></h4><p>在es暴露的异步结构中，任何对象都有一个then()方法</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyThenable</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(){}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyThenable</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(){}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_2-promise-prototype-then" tabindex="-1">2. Promise.prototype.then() <a class="header-anchor" href="#_2-promise-prototype-then" aria-label="Permalink to &quot;2. Promise.prototype.then()&quot;">​</a></h4><h4 id="_3-promise-prototype-catch" tabindex="-1">3. Promise.prototype.catch() <a class="header-anchor" href="#_3-promise-prototype-catch" aria-label="Permalink to &quot;3. Promise.prototype.catch()&quot;">​</a></h4><h4 id="_4-promise-prototype-finally" tabindex="-1">4.Promise.prototype.finally() <a class="header-anchor" href="#_4-promise-prototype-finally" aria-label="Permalink to &quot;4.Promise.prototype.finally()&quot;">​</a></h4><h3 id="_5-非重入期约方法" tabindex="-1">5. 非重入期约方法 <a class="header-anchor" href="#_5-非重入期约方法" aria-label="Permalink to &quot;5. 非重入期约方法&quot;">​</a></h3><h3 id="_6-邻近处理程序的执行顺序" tabindex="-1">6. 邻近处理程序的执行顺序 <a class="header-anchor" href="#_6-邻近处理程序的执行顺序" aria-label="Permalink to &quot;6. 邻近处理程序的执行顺序&quot;">​</a></h3>`,32),e=[p];function c(r,t,E,y,i,h){return a(),n("div",null,e)}const F=s(o,[["render",c]]);export{u as __pageData,F as default};
