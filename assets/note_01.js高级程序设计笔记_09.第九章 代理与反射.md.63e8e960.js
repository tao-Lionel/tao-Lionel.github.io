import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.4313453f.js";const F=JSON.parse('{"title":"第九章 代理与反射","description":"","frontmatter":{"title":"第九章 代理与反射","date":"2022-09-21T19:03:57.000Z","permalink":"/pages/990ee2/","categories":["前端","学习笔记","Js高级程序设计笔记"],"tags":[null],"author":{"name":"Lionel tao","link":"https://github.com/tao-Lionel"}},"headers":[],"relativePath":"note/01.js高级程序设计笔记/09.第九章 代理与反射.md","filePath":"note/01.js高级程序设计笔记/09.第九章 代理与反射.md","lastUpdated":1688706935000}'),o={name:"note/01.js高级程序设计笔记/09.第九章 代理与反射.md"},p=l(`<h2 id="_9-1-代理基础" tabindex="-1">9.1 代理基础 <a class="header-anchor" href="#_9-1-代理基础" aria-label="Permalink to &quot;9.1 代理基础&quot;">​</a></h2><p>代理类似 C++指针</p><h3 id="_9-1-1-创建空代理" tabindex="-1">9.1.1 创建空代理 <a class="header-anchor" href="#_9-1-1-创建空代理" aria-label="Permalink to &quot;9.1.1 创建空代理&quot;">​</a></h3><p>代理是通过 proxy 构造函数创建的，接受两个出参数，缺一不可。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">target</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  id: </span><span style="color:#9ECBFF;">&quot;target&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">handler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">proxy</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">proxy</span><span style="color:#E1E4E8;">(target, handler);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// id 属性会访问同一个值</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(target.id); </span><span style="color:#6A737D;">// target</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(proxy.id); </span><span style="color:#6A737D;">// target</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 严格相等可以区分</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(target </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> proxy); </span><span style="color:#6A737D;">// false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">target</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  id: </span><span style="color:#032F62;">&quot;target&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">handler</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">proxy</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">proxy</span><span style="color:#24292E;">(target, handler);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// id 属性会访问同一个值</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(target.id); </span><span style="color:#6A737D;">// target</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(proxy.id); </span><span style="color:#6A737D;">// target</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 严格相等可以区分</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(target </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> proxy); </span><span style="color:#6A737D;">// false</span></span></code></pre></div><h3 id="_9-1-2-定义捕获器" tabindex="-1">9.1.2 定义捕获器 <a class="header-anchor" href="#_9-1-2-定义捕获器" aria-label="Permalink to &quot;9.1.2 定义捕获器&quot;">​</a></h3><p>可以定义一个 get()捕获器，这样当通过代理对象执行 get 操作时，会触发定义的 get()捕获器 只有在代理对象上执行这些操作才会触发捕获器</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">target</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  foo: </span><span style="color:#9ECBFF;">&quot;aaa&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">handler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;bbb&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">proxy</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">proxy</span><span style="color:#E1E4E8;">(target, handler);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(target.foo); </span><span style="color:#6A737D;">// aaa</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(proxy.foo); </span><span style="color:#6A737D;">// bbb</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">target</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  foo: </span><span style="color:#032F62;">&quot;aaa&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">handler</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;bbb&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">proxy</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">proxy</span><span style="color:#24292E;">(target, handler);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(target.foo); </span><span style="color:#6A737D;">// aaa</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(proxy.foo); </span><span style="color:#6A737D;">// bbb</span></span></code></pre></div><h3 id="_9-1-3-捕获器参数和反射-api" tabindex="-1">9.1.3 捕获器参数和反射 API <a class="header-anchor" href="#_9-1-3-捕获器参数和反射-api" aria-label="Permalink to &quot;9.1.3 捕获器参数和反射 API&quot;">​</a></h3><p>所有捕获器都可以访问相应的参数</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">target</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  foo: </span><span style="color:#9ECBFF;">&quot;bar&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">handler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// trapTarget:目标对象 property：要查询的属性 receiver:代理对象</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">trapTarget</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">property</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">receiver</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(trapTarget, property, receiver);</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">target</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  foo: </span><span style="color:#032F62;">&quot;bar&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">handler</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// trapTarget:目标对象 property：要查询的属性 receiver:代理对象</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#E36209;">trapTarget</span><span style="color:#24292E;">, </span><span style="color:#E36209;">property</span><span style="color:#24292E;">, </span><span style="color:#E36209;">receiver</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(trapTarget, property, receiver);</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>处理程序中所有可以捕获的方法都有对应的反射（Reflect）API方法</p><h3 id="_9-1-4-捕获器不变式" tabindex="-1">9.1.4 捕获器不变式 <a class="header-anchor" href="#_9-1-4-捕获器不变式" aria-label="Permalink to &quot;9.1.4 捕获器不变式&quot;">​</a></h3><p>如目标对象有一个不可配置且不可写的数据属性，那么捕获器返回一个与该属性不同的值时，会报错。</p><h3 id="_9-1-5-可撤销代理" tabindex="-1">9.1.5 可撤销代理 <a class="header-anchor" href="#_9-1-5-可撤销代理" aria-label="Permalink to &quot;9.1.5 可撤销代理&quot;">​</a></h3><p>Proxy.revocable() 支持切断目标对象与代理对象之间的关系</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> {</span><span style="color:#79B8FF;">proxy</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">revoke</span><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Proxy.</span><span style="color:#B392F0;">revocable</span><span style="color:#E1E4E8;">(target,handler)</span></span>
<span class="line"><span style="color:#B392F0;">revoke</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// 撤销代理</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> {</span><span style="color:#005CC5;">proxy</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">revoke</span><span style="color:#24292E;">} </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Proxy.</span><span style="color:#6F42C1;">revocable</span><span style="color:#24292E;">(target,handler)</span></span>
<span class="line"><span style="color:#6F42C1;">revoke</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// 撤销代理</span></span></code></pre></div><h3 id="_9-1-6-实用反射api" tabindex="-1">9.1.6 实用反射API <a class="header-anchor" href="#_9-1-6-实用反射api" aria-label="Permalink to &quot;9.1.6 实用反射API&quot;">​</a></h3><h4 id="_1-反射api与对象api" tabindex="-1">1.反射API与对象API <a class="header-anchor" href="#_1-反射api与对象api" aria-label="Permalink to &quot;1.反射API与对象API&quot;">​</a></h4><p>1.反射API并不限于捕获处理程序 2.大多数反射API方法在Object类型上有对应的方法</p><h4 id="_2-状态标记" tabindex="-1">2.状态标记 <a class="header-anchor" href="#_2-状态标记" aria-label="Permalink to &quot;2.状态标记&quot;">​</a></h4><p>很多反射方法返回称作‘状态标记’的布尔值，表示意图执行的操作是否成功</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">o</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(Reflect.</span><span style="color:#B392F0;">defineProperty</span><span style="color:#E1E4E8;">(o,</span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">,{value:</span><span style="color:#9ECBFF;">&#39;bar&#39;</span><span style="color:#E1E4E8;">})){</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;success&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;failure&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">o</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">(Reflect.</span><span style="color:#6F42C1;">defineProperty</span><span style="color:#24292E;">(o,</span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">,{value:</span><span style="color:#032F62;">&#39;bar&#39;</span><span style="color:#24292E;">})){</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;success&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;failure&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_3-用一等函数代替操作符" tabindex="-1">3. 用一等函数代替操作符 <a class="header-anchor" href="#_3-用一等函数代替操作符" aria-label="Permalink to &quot;3. 用一等函数代替操作符&quot;">​</a></h4><h4 id="_4-安全的应用函数" tabindex="-1">4.安全的应用函数 <a class="header-anchor" href="#_4-安全的应用函数" aria-label="Permalink to &quot;4.安全的应用函数&quot;">​</a></h4><p>防止要调用的原生方法，被单独定义，可以通过<code>Reflect.xxxx()</code>来避免</p><h3 id="_9-1-7-代理另一个代理" tabindex="-1">9.1.7 代理另一个代理 <a class="header-anchor" href="#_9-1-7-代理另一个代理" aria-label="Permalink to &quot;9.1.7 代理另一个代理&quot;">​</a></h3><p>代理可以拦截反射API的操作，也可以通过代理代理另一个代理</p><h3 id="_9-1-8-代理的问题与不足" tabindex="-1">9.1.8 代理的问题与不足 <a class="header-anchor" href="#_9-1-8-代理的问题与不足" aria-label="Permalink to &quot;9.1.8 代理的问题与不足&quot;">​</a></h3><h4 id="_1-代理中this" tabindex="-1">1. 代理中this <a class="header-anchor" href="#_1-代理中this" aria-label="Permalink to &quot;1. 代理中this&quot;">​</a></h4><h4 id="_2-代理与内部槽位" tabindex="-1">2. 代理与内部槽位 <a class="header-anchor" href="#_2-代理与内部槽位" aria-label="Permalink to &quot;2. 代理与内部槽位&quot;">​</a></h4><h2 id="_9-2-代理捕获器与反射方法" tabindex="-1">9.2 代理捕获器与反射方法 <a class="header-anchor" href="#_9-2-代理捕获器与反射方法" aria-label="Permalink to &quot;9.2 代理捕获器与反射方法&quot;">​</a></h2><p>代理可以捕获13种不同的基本操作 get()、set()、has()、defineProperty()、getOwnPropertyDescriptor()、deleteProperty()、ownKeys()、getPrototypeOf()、setPrototypeOf()、isExtensible()、preventExtensions()、apply()、construct()</p><h2 id="_9-3-代理模式" tabindex="-1">9.3 代理模式 <a class="header-anchor" href="#_9-3-代理模式" aria-label="Permalink to &quot;9.3 代理模式&quot;">​</a></h2><h3 id="_9-3-1-跟踪属性访问" tabindex="-1">9.3.1 跟踪属性访问 <a class="header-anchor" href="#_9-3-1-跟踪属性访问" aria-label="Permalink to &quot;9.3.1 跟踪属性访问&quot;">​</a></h3><p>通过捕获get、set和has等操作，可以知道对象什么时候被访问、被查询</p><h3 id="_9-3-2-隐藏属性" tabindex="-1">9.3.2 隐藏属性 <a class="header-anchor" href="#_9-3-2-隐藏属性" aria-label="Permalink to &quot;9.3.2 隐藏属性&quot;">​</a></h3><p>可以隐藏目标对象上的属性</p><h3 id="_9-3-3-属性验证" tabindex="-1">9.3.3 属性验证 <a class="header-anchor" href="#_9-3-3-属性验证" aria-label="Permalink to &quot;9.3.3 属性验证&quot;">​</a></h3><p>可以根据所附的值来决定允许赋值还是拒绝赋值</p><h3 id="_9-3-4-函数与构造函数参数验证" tabindex="-1">9.3.4 函数与构造函数参数验证 <a class="header-anchor" href="#_9-3-4-函数与构造函数参数验证" aria-label="Permalink to &quot;9.3.4 函数与构造函数参数验证&quot;">​</a></h3><p>跟保护和验证对象属性一样，也可以对函数和构造函数的参数进行验证</p><h3 id="_9-3-5-数据绑定与可观察对象" tabindex="-1">9.3.5 数据绑定与可观察对象 <a class="header-anchor" href="#_9-3-5-数据绑定与可观察对象" aria-label="Permalink to &quot;9.3.5 数据绑定与可观察对象&quot;">​</a></h3>`,43),e=[p];function t(r,c,y,E,i,h){return a(),n("div",null,e)}const u=s(o,[["render",t]]);export{F as __pageData,u as default};
