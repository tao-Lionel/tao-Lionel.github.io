import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.4313453f.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"note/03.ES6笔记/Module的语法.md","filePath":"note/03.ES6笔记/Module的语法.md","lastUpdated":1697093828000}'),p={name:"note/03.ES6笔记/Module的语法.md"},o=l(`<p>在ES6之前，主要使用的是CommonJS和AMD两种方式实现模块加载。 那么CommonJs有什么缺点呢？ CommonJS和AMD模块都只能在运行时才确定模块的依赖关系，以及输入输出的变量，比如，CommonJS模块就是对象，输入必须查找对象属性，没法在编译时做静态优化。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// CommonJs模块</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> {stat,exists,readfile} </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;fs&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 等同于</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> _fs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;fs&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> stat </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> _fs.stat</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> exists </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> _fs.exists</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> readfile </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> _fs.readfile</span></span>
<span class="line"><span style="color:#6A737D;">// 加载了整个fs模块</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// CommonJs模块</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> {stat,exists,readfile} </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;fs&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 等同于</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> _fs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;fs&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> stat </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> _fs.stat</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> exists </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> _fs.exists</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> readfile </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> _fs.readfile</span></span>
<span class="line"><span style="color:#6A737D;">// 加载了整个fs模块</span></span></code></pre></div><p>相反ES6的</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 只从fs模块加载这三个方法，其他不加载（静态加载）</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> {stat,exists,readfile} </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;fs&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 只从fs模块加载这三个方法，其他不加载（静态加载）</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> {stat,exists,readfile} </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;fs&#39;</span></span></code></pre></div><p>模块的整体加载</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> xxx </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./xxx.js&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> xxx </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./xxx.js&#39;</span></span></code></pre></div><h3 id="export-default-命令" tabindex="-1">export default 命令 <a class="header-anchor" href="#export-default-命令" aria-label="Permalink to &quot;export default 命令&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// a.js</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">(){}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// b.js</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> xxx </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;a.js&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 相当于</span></span>
<span class="line"><span style="color:#6A737D;">// a.js</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">(){}</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> {fn </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// b.js</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> xxx } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;a.js&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// a.js</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(){}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// b.js</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> xxx </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;a.js&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 相当于</span></span>
<span class="line"><span style="color:#6A737D;">// a.js</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(){}</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> {fn </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// b.js</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> xxx } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;a.js&#39;</span></span></code></pre></div><h3 id="export-和-import-的复合写法" tabindex="-1">export 和 import 的复合写法 <a class="header-anchor" href="#export-和-import-的复合写法" aria-label="Permalink to &quot;export 和 import 的复合写法&quot;">​</a></h3><p>如果在一个模块中显输入后输出同一个模块，那么import 和 export 可以合在一起</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> {a,b} </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./ab.js&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 相当于(但是，a,b实际上并没有导入当前模块，只是做了转发，所以在当前模块是无法使用的)</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> {a,b} </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./ab.js&#39;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> {a,b}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> {a,b} </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./ab.js&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 相当于(但是，a,b实际上并没有导入当前模块，只是做了转发，所以在当前模块是无法使用的)</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> {a,b} </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./ab.js&#39;</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> {a,b}</span></span></code></pre></div><h3 id="module模块和commonjs模块的差异" tabindex="-1">Module模块和CommonJS模块的差异 <a class="header-anchor" href="#module模块和commonjs模块的差异" aria-label="Permalink to &quot;Module模块和CommonJS模块的差异&quot;">​</a></h3><ol><li>CommonJS输出的是值的拷贝，ES6模块输出的是值的引用</li></ol><p>CommonJS一旦输出一个值，模块内部的变化就影响不到这个值</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// lib.js</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> count </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sum</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> count</span><span style="color:#F97583;">++</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  count:count,</span></span>
<span class="line"><span style="color:#E1E4E8;">  sum:sum</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// main.js</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> lib </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./lib.js&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(lib.count) </span><span style="color:#6A737D;">// 3</span></span>
<span class="line"><span style="color:#E1E4E8;">lib.</span><span style="color:#B392F0;">sum</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(lib.count) </span><span style="color:#6A737D;">// 3  </span></span>
<span class="line"><span style="color:#6A737D;">// 模块内部的值没有发生变化（lib.count是一个原始类型的值）会被缓存，除非写成一个函数。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// lib.js</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sum</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> count</span><span style="color:#D73A49;">++</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  count:count,</span></span>
<span class="line"><span style="color:#24292E;">  sum:sum</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// main.js</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> lib </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./lib.js&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(lib.count) </span><span style="color:#6A737D;">// 3</span></span>
<span class="line"><span style="color:#24292E;">lib.</span><span style="color:#6F42C1;">sum</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(lib.count) </span><span style="color:#6A737D;">// 3  </span></span>
<span class="line"><span style="color:#6A737D;">// 模块内部的值没有发生变化（lib.count是一个原始类型的值）会被缓存，除非写成一个函数。</span></span></code></pre></div><ol start="2"><li>CommonJS是运行时加载(动态导入<code>require(</code>\${xxx}/a.js<code>)</code>)，ES6模块是编译时输出接口（主要是因为CommonJS加载的是一个对象（module.exports），只有在运行时才会生成，而ES6模块不是对象）</li><li>CommonJS的<code>require()</code>是同步加载，ES6模块的<code>import</code>命令是异步加载。</li></ol>`,16),e=[o];function t(c,r,y,E,i,d){return a(),n("div",null,e)}const m=s(p,[["render",t]]);export{F as __pageData,m as default};
